import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { jsPDF } from 'jspdf';

const Groceries = () => {
  const [items, setItems] = useState([]);
  const [form, setForm] = useState({ name: '', quantity: '', unit: 'kg', price: '' });
  const navigate = useNavigate();

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleAdd = () => {
    const { name, quantity, unit, price } = form;
    if (!name || quantity <= 0 || price <= 0) return;

    const newItem = {
      name,
      quantity: parseFloat(quantity),
      unit,
      price: parseFloat(price)
    };
    setItems([...items, newItem]);
    setForm({ name: '', quantity: '', unit: 'kg', price: '' });
  };

  const handleDelete = (index) => {
    const newList = [...items];
    newList.splice(index, 1);
    setItems(newList);
  };

  const clearAll = () => {
    if (window.confirm('Clear all items?')) setItems([]);
  };

  const downloadPDF = () => {
    if (items.length === 0) {
      alert('No items to download!');
      return;
    }

    const doc = new jsPDF();
    const currentDate = new Date().toLocaleDateString();

    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.text('Groceries Expense Report', 20, 20);

    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${currentDate}`, 20, 30);

    const headers = ['Item', 'Quantity', 'Unit', 'Price (Taka)', 'Total (Taka)'];
    const headerY = 50;
    const colWidths = [40, 25, 25, 30, 30];
    let xPos = 20;

    doc.setFont(undefined, 'bold');
    headers.forEach((header, index) => {
      doc.text(header, xPos, headerY);
      xPos += colWidths[index];
    });

    doc.setLineWidth(0.5);
    doc.line(20, headerY + 2, 170, headerY + 2);

    doc.setFont(undefined, 'normal');
    let yPos = headerY + 10;

    items.forEach((item) => {
      const rowData = [
        item.name,
        item.quantity.toString(),
        item.unit,
        item.price.toFixed(2),
        (item.quantity * item.price).toFixed(2)
      ];

      xPos = 20;
      rowData.forEach((data, i) => {
        doc.text(data, xPos, yPos);
        xPos += colWidths[i];
      });

      yPos += 8;
      if (yPos > 270) {
        doc.addPage();
        yPos = 20;
      }
    });

    yPos += 5;
    doc.line(20, yPos, 170, yPos);
    yPos += 10;

    const total = items.reduce((sum, item) => sum + item.quantity * item.price, 0);
    doc.setFont(undefined, 'bold');
    doc.setFontSize(14);
    doc.text(`Total Amount: ${total.toFixed(2)} Taka`, 20, yPos);

    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by Groceries Expense Tracker', 20, 290);

    doc.save(`groceries-report-${currentDate.replace(/\//g, '-')}.pdf`);
  };

  const total = items.reduce((sum, item) => sum + item.quantity * item.price, 0);

  return (
    <div style={{ fontFamily: 'Arial, sans-serif', backgroundColor: '#f5f5f5' }}>
      <header style={{ backgroundColor: '#2c3e50', color: 'white', padding: '2rem 0', textAlign: 'center' }}>
        <h1 style={{ fontSize: '2.5rem', margin: 0 }}>Groceries Expense Tracker</h1>
        <p style={{ fontSize: '1.2rem', marginTop: '0.5rem' }}>Monitor your grocery costs and stay within budget</p>
      </header>

      <main style={{ maxWidth: '1200px', margin: '2rem auto', padding: '0 1rem' }}>
        <button 
          onClick={() => navigate('/')}
          style={{
            backgroundColor: '#34495e', color: 'white', border: 'none', padding: '0.75rem 1.5rem',
            borderRadius: '5px', cursor: 'pointer', marginBottom: '2rem', fontSize: '1rem'
          }}
          onMouseOver={(e) => e.target.style.backgroundColor = '#2c3e50'}
          onMouseOut={(e) => e.target.style.backgroundColor = '#34495e'}
        >
          ‚Üê Back to Home
        </button>

        <div style={{ backgroundColor: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 10px rgba(0,0,0,0.1)', marginBottom: '2rem' }}>
          <h2 style={{ marginBottom: '1.5rem', color: '#2c3e50' }}>Add New Item</h2>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '1rem' }}>
            <input name="name" placeholder="Item Name" value={form.name} onChange={handleChange} style={inputStyle} />
            <input name="quantity" type="number" min="0.1" step="0.1" placeholder="Quantity" value={form.quantity} onChange={handleChange} style={inputStyle} />
            <select name="unit" value={form.unit} onChange={handleChange} style={inputStyle}>
              <option value="kg">kg</option>
              <option value="liter">liter</option>
              <option value="piece">piece</option>
              <option value="packet">packet</option>
            </select>
            <input name="price" type="number" min="0.1" step="0.01" placeholder="Price (Taka)" value={form.price} onChange={handleChange} style={inputStyle} />
            <button onClick={handleAdd} style={addButtonStyle} onMouseOver={(e) => e.target.style.backgroundColor = '#219a52'} onMouseOut={(e) => e.target.style.backgroundColor = '#27ae60'}>
              Add Item
            </button>
          </div>
        </div>

        <div style={{ backgroundColor: 'white', padding: '2rem', borderRadius: '10px', boxShadow: '0 2px 10px rgba(0,0,0,0.1)' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '1.5rem' }}>
            <h2 style={{ color: '#2c3e50' }}>Items List</h2>
            {items.length > 0 && (
              <button onClick={downloadPDF} style={downloadButtonStyle} onMouseOver={(e) => e.target.style.backgroundColor = '#2980b9'} onMouseOut={(e) => e.target.style.backgroundColor = '#3498db'}>
                üìÑ Download PDF
              </button>
            )}
          </div>

          {items.length > 0 ? (
            <>
              <div style={{ overflowX: 'auto' }}>
                <table style={{ width: '100%', borderCollapse: 'collapse', minWidth: '600px' }}>
                  <thead>
                    <tr style={{ backgroundColor: '#f8f9fa' }}>
                      <th style={thStyle}>Item</th>
                      <th style={thStyle}>Quantity</th>
                      <th style={thStyle}>Unit</th>
                      <th style={thStyle}>Price (Taka)</th>
                      <th style={thStyle}>Total (Taka)</th>
                      <th style={thStyle}>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {items.map((item, idx) => (
                      <tr key={idx}>
                        <td style={tdStyleBold}>{item.name}</td>
                        <td style={tdStyle}>{item.quantity}</td>
                        <td style={tdStyle}>{item.unit}</td>
                        <td style={tdStyle}>{item.price.toFixed(2)}</td>
                        <td style={tdStyleBold}>{(item.quantity * item.price).toFixed(2)}</td>
                        <td style={tdStyle}>
                          <button onClick={() => handleDelete(idx)} style={deleteButtonStyle}>Delete</button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                  <tfoot>
                    <tr style={{ backgroundColor: '#f8f9fa', fontWeight: 'bold', fontSize: '1.1rem' }}>
                      <td colSpan="4" style={tdStyle}>Total Amount:</td>
                      <td style={{ ...tdStyle, color: '#27ae60' }}>{total.toFixed(2)} Taka</td>
                      <td style={tdStyle}></td>
                    </tr>
                  </tfoot>
                </table>
              </div>

              <div style={{ marginTop: '2rem', textAlign: 'center' }}>
                <button onClick={clearAll} style={clearButtonStyle}>Clear All Items</button>
              </div>
            </>
          ) : (
            <div style={{ textAlign: 'center', padding: '3rem', color: '#6c757d', fontSize: '1.2rem' }}>
              <p>No items added yet. Start by adding your first grocery item!</p>
            </div>
          )}
        </div>
      </main>

      <footer style={{ backgroundColor: '#2c3e50', color: 'white', textAlign: 'center', padding: '2rem 0', marginTop: '3rem' }}>
        <p style={{ margin: 0 }}>¬© 2025 Expense Tracker | All Rights Reserved</p>
      </footer>
    </div>
  );
};

//  Style Constants
const inputStyle = {
  padding: '0.75rem', border: '2px solid #ddd', borderRadius: '5px', fontSize: '1rem'
};
const addButtonStyle = {
  backgroundColor: '#27ae60', color: 'white', border: 'none', padding: '0.75rem 1.5rem',
  borderRadius: '5px', cursor: 'pointer', fontSize: '1rem', fontWeight: 'bold'
};
const downloadButtonStyle = {
  backgroundColor: '#3498db', color: 'white', border: 'none', padding: '0.75rem 1.5rem',
  borderRadius: '5px', cursor: 'pointer', fontSize: '1rem', fontWeight: 'bold'
};
const deleteButtonStyle = {
  backgroundColor: '#e74c3c', color: 'white', border: 'none', padding: '0.5rem 1rem',
  borderRadius: '5px', cursor: 'pointer'
};
const clearButtonStyle = {
  backgroundColor: '#e74c3c', color: 'white', border: 'none', padding: '0.75rem 2rem',
  borderRadius: '5px', cursor: 'pointer', fontSize: '1rem', fontWeight: 'bold'
};
const thStyle = {
  padding: '1rem', textAlign: 'left', borderBottom: '2px solid #dee2e6'
};
const tdStyle = {
  padding: '1rem', borderBottom: '1px solid #dee2e6'
};
const tdStyleBold = {
  ...tdStyle, fontWeight: 'bold'
};

export default Groceries;
